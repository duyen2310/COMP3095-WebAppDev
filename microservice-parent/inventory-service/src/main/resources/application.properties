spring.application.name=inventory-service

server.port=8083

inventory-service.version=v1.0

#Postgres Local configuration
spring.datasource.url=jdbc:postgresql://localhost:5434/inventory-service

#Postgres Configuration
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# none, validate, update, create, create-drop
# Options for controlling how Hibernate handles schema management
# none: No schema generation or validation is performed.
# none because we will be using flyaway
spring.jpa.hibernate.ddl-auto=none

# Web based documentation - http://localhost:8083/swagger-ui
springdoc.swagger-ui.path=/swagger-ui

# Json based documentation- http://localhost:8083/api-docs
springdoc.api-docs.path=/api-docs

# validate: Hibernate will validate the schema against the database without making any changes.
# This is useful to ensure that the database structure matches the entity mappings.
# Validation failure will throw an error.
#spring.jpa.hibernate.ddl-auto=validate

# update: Hibernate will modify the database schema to match the entity mappings.
# Only adds missing columns and tables, but does not remove anything.
# This is useful for iterative development but should be avoided in production.
#spring. jpa.hibernate.ddl-auto=update

# create: Hibernate will drop the existing schema and recreate it every time the application starts.
# This is useful during development but should not be used in production environments as it will
# erase all data on each startup.
#spring. jpa.hibernate.ddl-auto=create